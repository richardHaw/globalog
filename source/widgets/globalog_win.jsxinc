/*
MIT License

Copyright (c) 2021 richardHaw

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


(function(){

$.global.GLOBALOG_WIN = undefined;
const LOGGER_TIT = "Globalog Viewer";

function GlobaLogWin(){
    /*
    finds or create a new logger
    */

    GLOBALOG_WIN =  CreateViewer(); // for testing only

    // const old_logger = Window.find("palette",LOGGER_TIT);
    // if (old_logger === null || old_logger === undefined){
        // GLOBALOG_WIN =  CreateViewer();
    // }
    // else {
        // GLOBALOG_WIN = old_logger;
        // GLOBALOG_WIN.multiline.text = "";
    // }

    GLOBALOG_WIN.show();
}
$.global.GlobaLogWin = GlobaLogWin;


function CreateViewer(){
    const contructor = {resizeable:true,
                        closeButton:true,
                        minimizeButton:false,
                        maximizeButton:false,
                        borderless:false,
                        independent:false}

    // window
    const win = new Window("palette", "", undefined, contructor);
    win.text = LOGGER_TIT;
    win.name = "GLOBALOG_WIN";
    win.orientation = "column";
    win.alignChildren = ["top","fill"];
    win.alignment = ["fill","fill"];
    win.spacing = 5;
    win.margin = 5;
    win.buffer = new Array();

    win.init_width = 300;
    win.init_height = 100;

    win.onResizing = win.onResize = function(){
        this.layout.resize();
        if (this.size.width < this.init_width && this.size.height < this.init_height){
            this.size = {width: this.init_width, height: this.init_height};
            this.layout.resize();
        }

    }

    win.onShow = function(){
        this.init_width = this.size.width;
        this.init_height = this.size.height;
        this.minimumSize = this.size;
        this.layout.resize();
    }

    win.populate = function(buffer_array){
        this.multiline.text = "";
        var new_text = "";
        for (var b = 0; b < buffer_array.length; b++){
            new_text += buffer_array[b] + "\n";
        }
        this.multiline.text = new_text;
        this.buffer = buffer_array;
    }

    // multiline
    win.multiline = win.add("edittext",
                            undefined,
                            "",
                            {multiline:true,
                            scrolling:true,
                            readonly:true})

    win.multiline.alignment = ["fill", "fill"];
    win.multiline.minimumSize = [600,400];
    win.multiline.active = true;

    // bottom
    win.bottom = win.add("group");
    win.bottom.orientation = "row";
    win.bottom.alignment = ["fill", "bottom"];
    win.bottom.spacing = 1;
    win.bottom.margin = 2;

    // buttons
    const btn_names = ["Show All","Debug","Info","Warning","Error","Critical"];
    win.buttons = new Array();
    for (var b = 0; b < btn_names.length; b++){
        var btn = win.bottom.add("button");
        btn.name = btn_names[b] + "_btn";
        btn.text = btn_names[b];
        btn.alignment = ["left", "bottom"];
        btn.minimumSize = [55,25];
        btn.maximumSize = [55,25];

        btn.onClick = function(){
            function FilterLines(keyw, buff_array){
                const filtered = new Array();
                for (var k = 0; k < buff_array.length; k++){
                    if (buff_array[k].indexOf(keyw) != -1){
                        filtered.push(buff_array[k]);
                    }
                }
                return filtered;
            }

            var new_contents = "";
            switch(this.text){
                case btn_names[0]:
                    new_contents = this.window.buffer.join("\n");
                    break;
                case btn_names[1]:
                    new_contents = FilterLines("DBUG",this.window.buffer).join("\n");
                    break;
                case btn_names[2]:
                    new_contents = FilterLines("INFO",this.window.buffer).join("\n");
                    break;
                case btn_names[3]:
                    new_contents = FilterLines("WARN",this.window.buffer).join("\n");
                    break;
                case btn_names[4]:
                    new_contents = FilterLines("EROR",this.window.buffer).join("\n");
                    break;
                case btn_names[5]:
                    new_contents = FilterLines("CRIT",this.window.buffer).join("\n");
                    break;
            }
            this.window.multiline.text = new_contents;
        }

        win.buttons.push(btn);
    }

    // open button
    win.open_btn = win.bottom.add("button");
    win.open_btn.name = "open_btn";
    win.open_btn.text = "Open Log File";
    win.open_btn.alignment = ["right", "bottom"];
    win.open_btn.minimumSize = [90,25];
    win.open_btn.maximumSize = [90,25];

    // done
    return win;
}


})();